class Grinder

types

public Bean :: id : nat
							 weight : nat1;
							
instance variables

beans : set of Bean := {};
sbeans : seq of Bean := [];

operations

public CalculateWeight: set of Bean ==> nat
CalculateWeight(sb) == (
	dcl tot : nat := 0; 
	for all s in set sb do
		tot := tot + s.weight;
	
	return tot;
);

public Grinder: nat ==> Grinder
Grinder(noOfBeans) == (
	FillGrinder(noOfBeans);
);

public FillGrinder: nat1 ==> ()
FillGrinder(upper) == (
	IO`printf("\nFilling Grinder with %1s beans", [upper]);
	beans := {mk_Bean(x,(MATH`rand(3) mod 3 + 1)) | x in set{1,...,upper}};
	sbeans := [mk_Bean(x,(MATH`rand(3) mod 3 + 1)) | x in set{1,...,upper}];
)
pre upper <= 500
post card beans <= 500;


public Grind: nat1 ==> ()
Grind(w) == (
	dcl tot : nat := 0;
	dcl gri : set of Bean := {};
	for all s in set beans do
	if tot <= w
	then (tot := tot + s.weight; 
				gri := gri union {s});
	
	beans := beans \ gri;
)
pre EnoughBeans(w); -- what if out off beans? error message!!!

/*
public Grind2: int ==> ()
Grind2(w) == (	
	if w > 0 then (
		sbeans := tl sbeans;
		Grind2(w - (hd sbeans).weight);)
);
*/
/*
public Grind4: nat1 ==> ()
Grind4(w) == (
 dcl tmp : set of Bean := {};
	tmp := {x | x in set beans & CalculateWeight({x}) < w };
	beans := beans \ tmp;
);	
	
public Grind2: nat1 ==> ()	-- slow grind is faster
Grind2(w) == (
	dcl tot : nat := 0; 
	for all s in set beans do
	if tot <= w
	then (tot := tot + s.weight; 
				beans := beans \ {s});
)
pre EnoughBeans(w); -- what if out off beans? error message!!!
*/
pure EnoughBeans: nat1 ==> bool
EnoughBeans(w) == 
	return w <= RemaingBeanWeight();


pure public
RemaingBeanWeight: () ==> nat
RemaingBeanWeight() == (
	dcl tot : nat := 0; 
	for all s in set beans do
		tot := tot + s.weight;
	
	return tot;
);

end Grinder
