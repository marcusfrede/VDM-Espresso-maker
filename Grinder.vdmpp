class Grinder

types

Bag = map nat1 to nat1;
							 							
instance variables

beans : Bag := {|->};
inv beansDomInv(beans);

functions

beansDomInv: (Bag) -> bool
beansDomInv(b) ==
	dom b \ {1,2,3} = {};  

Remove : Bag * nat -> Bag
Remove (b, e) ==
  if e in set dom b
  then if b(e) = 1
       then  {e} <-: b
       else  b ++ {e |-> b(e) - 1}
  else b
pre e in set dom b;

Select: Bag * nat -> Bag
Select(bag,weight) ==
  if weight = 0
  then bag
  else let b in set dom bag be st weight = b or forall b1 in set dom bag & b >= b1
       in 
         Select(Remove(bag,b), (weight - b) mod weight)        
pre weight >= 0 and CalculateWeight(bag) >= weight 
measure mselect;


mselect: Bag * nat -> nat
mselect(b, weight) == CalculateWeight(b) + weight;

Count : Bag * nat -> nat
Count (b, w) ==
  if w in set dom b
  then w * b(w)
  else 0;

CalculateWeight: Bag -> nat
CalculateWeight(b) ==
	Count(b,1) + Count(b,2) + Count(b,3);

operations

public FillGrinder: nat ==> ()
FillGrinder(n) == (
	IO`print("\nFilling Grinder with beans");
	beans := {x|-> MATH`rand(n) mod n + (n-10) | x in set{1,...,3}};
	IO`printf("\nGrinder filled with beans %1s %2s %3s", [beans(1), beans(2), beans(3)]);
)
pre n > 0 and n <= 50
post CalculateWeight(beans) <= 534;

public Grind: nat ==> ()
Grind(weight) == (
	beans := Select(beans, weight);
	IO`print("\n*** Grinding");
)
pre EnoughBeans(weight);

pure public EnoughBeans: nat ==> bool
EnoughBeans(w) == 
	return w <= CalculateWeight(beans);

pure public RemaingBeanWeight: () ==> nat
RemaingBeanWeight() == 
	return CalculateWeight(beans);

traces

T1:
		let x in set {0,...,4}
		in
			Select({1 |-> 2}, x);

T2:
		let bag = {2 |-> 3, 3 |-> 2}
		in
			let x in set {0,...,10}
		in
			Select(bag, x);

T3:
		let o in set {1,...,3} in
		let x in set {1,...,3} in
		let y in set {1,...,3} in
		let z in set {1,...,3}
		in
			let bag = {1|->x, 2|->x, 3|->x}
		in
			Remove(bag, o);

T4:
		let x in set {0,...,3}
		in
			let bag = {x|->x}
		in
			Remove(bag, x);

T5:
		let x in set {1}
		in
			let bag = {2|->1}
		in
			Select(bag, x);


end Grinder