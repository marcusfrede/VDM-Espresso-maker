class Machine
end Machine

--------------------------------------------------

class TempSensor is subclass of Sensor

operations

public TempSensor: nat * nat ==> TempSensor
	TempSensor (id, val) ==
		(ID := id;
		Value := val;
		);

public Step: () ==> ()
	Step() ==
		(Value := World`env.ReadTemp();
		);


end TempSensor

--------------------------------------------------

class FlowController
end FlowController

--------------------------------------------------

class PressureController
end PressureController

--------------------------------------------------

class Sensor

instance variables

protected ID	: nat;
protected Value	: nat;
protected Env	: Environment;

operations

public GetID: () ==> nat
	GetID() ==
		return ID;

public ReadValue: () ==> nat
	ReadValue() ==
		return Value;

public Step: () ==> ()
	Step() ==
		is subclass responsibility

end Sensor

--------------------------------------------------

class World

instance variables

static public env : Environment := new Environment("scenario.txt");
static public timerRef : Time := new Time();
  
operations

public Run: () ==> ()
Run() ==
 (-- start environment creating input
  env.Run();
 );

end World

--------------------------------------------------

class Time

instance variables

currentTime : nat := 0;

values

stepLength : nat = 10;

operations

public StepTime : () ==> ()
StepTime() ==
  currentTime := currentTime + stepLength;

public GetTime : () ==> nat
GetTime() ==
  return currentTime;

end Time

--------------------------------------------------

class Environment


--
-- instance variables
--
instance variables

private envTemp		: nat;

private io       : IO := new IO();
private inlines	 : seq of inline := [];
private simtime	 : nat;

private finished : bool := false;

--
-- Types definition section
--
types

-- Input file: Temp, Humid, Time
public inline	= nat * nat * nat;

--
-- Operations definition section
--
operations

public Environment: seq of char ==> Environment
  Environment(fname) ==
   (def mk_ (-,mk_(t,input)) = io.freadval[nat * seq of inline](fname) 
    in
     (inlines := input;
      simtime := t;
     );
  
    envTemp := 20;
   );
   
public Run: () ==> ()
Run () == 
 (while not isFinished() do
    (CreateSignal();
     -- step rest of model
     World`timerRef.StepTime();
    );
 );

private CreateSignal: () ==> ()
CreateSignal() ==
 (if len inlines > 0
  then (dcl curtime : nat := World`timerRef.GetTime();
  def mk_ (temp, time) = hd inlines 
  in
   (if time <= curtime
    then (SetTemp(temp);
          IO`print("\n\nNew env values set");
          IO`print("\nAt time: ");
          IO`print(time);
          inlines := tl inlines;
          return
         );
   );
  )
  else (finished := true;
        return
       );
 );	

public ReadTemp: () ==> nat
	ReadTemp() ==
		return envTemp;

public IncTemp: () ==> ()
	IncTemp() ==
		envTemp := envTemp + 1;

public DecTemp: () ==> ()
	DecTemp() ==
		envTemp := envTemp - 1;

public SetTemp: nat ==> ()
	SetTemp(t) ==
		envTemp := t;

public isFinished : () ==> bool
isFinished () == 
  return inlines = [] and finished;

end Environment

--------------------------------------------------
