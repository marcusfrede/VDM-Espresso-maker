class WaterTankController is subclass of GLOBAL

instance variables

private waterLevel : nat := 0;
private waterTemp  : nat := 0;

private tempSensor 				: TemperatureSensor := new TemperatureSensor(1, <TEMPSENSOR>);
private heatingElement 		: HeatingElement := new HeatingElement(1);
private coolingElement 		: CoolingElement := new CoolingElement(1);

inv LevelInv(waterLevel);
inv TempInv(tempSensor);

functions

IncreaseWater: nat * nat -> nat
IncreaseWater(current, goal) ==
	if current < goal
	then IncreaseWater(current+5, goal)
	else current
measure IncWaterMeasure;

IncWaterMeasure: nat * nat -> nat
IncWaterMeasure(c,g) == g - c; 

DecreaseWater: nat * nat -> nat
DecreaseWater(current, goal) ==
	if current > goal
	then DecreaseWater(current-5, goal)
	else current
measure DecWaterMeasure;

DecWaterMeasure: nat * nat -> nat
DecWaterMeasure(c,g) == g + c; 


LevelInv: nat -> bool
LevelInv(lvl) == 
	lvl >= minWaterTankLevel and lvl <= maxWaterTankLevel;

TempInv: TemperatureSensor -> bool
TempInv(s) == (
	s.ReadValue() >= 0 and s.ReadValue() <= 100
);

operations


public GetWaterLevel: () ==> nat
GetWaterLevel() ==
	return waterLevel;

public GetWaterTemp: () ==> nat
GetWaterTemp() ==
	return tempSensor.ReadValue();

public UpdateSensors: () ==> ()
UpdateSensors() == (
	tempSensor.Step();
);

public CorrectWaterTemperature: () ==> bool
CorrectWaterTemperature() == ( 			
	
	if tempSensor.ReadValue() > maxWaterTankTemp
	then (coolingElement.Step(); 
				return false); 
				 			
	if tempSensor.ReadValue() < minWaterTankTemp		
	then (heatingElement.Step();
			 return false);
			 
	return true;
);

public TakeWater: () ==> nat1
TakeWater() == (
 	waterLevel := DecreaseWater(waterLevel, waterLevel - 5);
 	IO`printf("\nDecreased water level to: %1s",[waterLevel]); 
	return 5;
);
	
public FillWaterTank: () ==> bool
FillWaterTank() == ( 			
	if waterLevel < maxWaterTankLevel
	then (
				waterLevel := IncreaseWater(waterLevel, waterLevel + 5);
				IO`printf("\nIncreased water level to: %1s",[waterLevel]); 
				return false
			 )
	else return true
);

pure public ReadTemp: () ==> nat
ReadTemp() ==
	return waterTemp;

public IncTemp: () ==> nat
IncTemp() == (
	waterTemp := waterTemp + 1;
	return waterTemp
);

public DecTemp: () ==> nat
DecTemp() == (
	waterTemp := waterTemp - 1;
	return waterTemp;
);


------ Only for testing -------


public SetWaterLevel: nat ==> ()
SetWaterLevel(l) == 
	waterLevel := l;

public SetTemp: nat ==> ()
SetTemp(t) == 
	waterTemp := t;


end WaterTankController