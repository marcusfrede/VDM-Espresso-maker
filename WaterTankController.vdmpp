class WaterTankController is subclass of GLOBAL

instance variables

protected waterLevel : nat := 0;
protected waterTemp  : nat := 0;

private heatingElement 		: HeatingElement := new HeatingElement(1);
private coolingElement 		: CoolingElement := new CoolingElement(1);

inv LevelInv(waterLevel);
inv TempInv(waterTemp);

functions

IncreaseWater: nat * nat -> nat
IncreaseWater(current, goal) ==
	if current < goal
	then IncreaseWater(current+5, goal)
	else current
measure IncWaterMeasure;

IncWaterMeasure: nat * nat -> nat
IncWaterMeasure(c,g) == g - c; 

DecreaseWater: nat * nat -> nat
DecreaseWater(current, goal) ==
	if current > goal
	then DecreaseWater(current-5, goal)
	else current
measure DecWaterMeasure;

DecWaterMeasure: nat * nat -> nat
DecWaterMeasure(c,g) == g + c; 

LevelInv: nat -> bool
LevelInv(lvl) == 
	lvl >= minWaterTankLevel and lvl <= maxWaterTankLevel;

TempInv: nat -> bool
TempInv(t) == 
	t >= 0 and t <= 100;

operations

public Step: () ==> ()
Step() ==
  (  
    UpdateSensors();
		FillWaterTank();		    				
		CorrectWaterTemperature();		
		
		if World`env.Verbose() then IO`print("\nTank step\n"); 
  );

public UpdateSensors: () ==> ()
UpdateSensors() == (
	CM`tempSensor.Step();
	CM`levelSensor.Step();
);

public CorrectWaterTemperature: () ==> ()
CorrectWaterTemperature() == ( 				
	if waterTemp > maxWaterTankTemp
	then coolingElement.Step(); 
					 			
	if waterTemp < minWaterTankTemp		
	then heatingElement.Step();
);

public TakeWater: nat1 ==> ()
TakeWater(n) == (
 	waterLevel := DecreaseWater(waterLevel, waterLevel - n);
 	if World`env.Verbose() then IO`printf("\nDecreased water level to: %1s",[waterLevel]); 
);
	
public FillWaterTank: () ==> ()
FillWaterTank() == ( 			
	if waterLevel < maxWaterTankLevel
	then (
				waterLevel := IncreaseWater(waterLevel, waterLevel + 5);
				if World`env.Verbose() then IO`printf("\nIncreased water level to: %1s",[waterLevel]); 
			 );
);

public IncTemp: () ==> nat
IncTemp() == (
	waterTemp := waterTemp + 1;
	return waterTemp
);

public DecTemp: () ==> nat
DecTemp() == (
	waterTemp := waterTemp - 1;
	return waterTemp;
);

------ Only for testing -------


public SetWaterLevel: nat ==> ()
SetWaterLevel(l) == 
	waterLevel := l;

public SetTemp: nat ==> ()
SetTemp(t) == 
	waterTemp := t;


end WaterTankController