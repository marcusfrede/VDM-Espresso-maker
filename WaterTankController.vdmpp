class WaterTankController is subclass of GLOBAL

instance variables

private waterLevel : nat := 0;
private tempSensor 				: TemperatureSensor := new TemperatureSensor(1, <TEMPSENSOR>);
private heatingElement 		: HeatingElement := new HeatingElement(1);
private coolingElement 		: CoolingElement := new CoolingElement(1);

inv LevelInv(waterLevel);
inv TempInv(tempSensor);

functions

IncreaseWater: nat * nat -> nat
IncreaseWater(current, goal) ==
	if current < goal
	then IncreaseWater(current+5, goal)
	else current;

DecreaseWater: nat * nat -> nat
DecreaseWater(current, goal) ==
	if current > goal
	then DecreaseWater(current-5, goal)
	else current;

LevelInv: nat -> bool
LevelInv(lvl) == 
	lvl >= minWaterTankLevel and lvl <= maxWaterTankLevel;

TempInv: TemperatureSensor -> bool
TempInv(s) == (
	s.ReadValue() >= 0 and s.ReadValue() <= 100
);

operations


public GetWaterLevel: () ==> nat
GetWaterLevel() ==
	return waterLevel;

public GetWaterTemp: () ==> nat
GetWaterTemp() ==
	return tempSensor.ReadValue();

public UpdateSensors: () ==> ()
UpdateSensors() == (
	tempSensor.Step();
);

public IncWaterLevel: nat * nat1 ==> nat1
	IncWaterLevel(cur, lvl) == (
		waterLevel := IncreaseWater(cur, lvl);
		return waterLevel);

public DecWaterLevel: nat1 * nat ==> nat
	DecWaterLevel(cur, lvl) == (
		waterLevel := DecreaseWater(cur, lvl);
		return waterLevel);


--		if World`env.Verbose() then	IO`printf("\nIncremented water level from %1s to %2s", [ol,nl]);
--		if World`env.Verbose() then	IO`printf("\nDecremented water level from %1s to %2s", [ol,nl]);

-- This is not good enough yet //TODO
public TakeWater: nat ==> ()
TakeWater(w) == (
	if w > 0
	then (
				let newLevel = DecWaterLevel(waterLevel, w) in
				IO`printf("\nDecreasing water level, new is: %1s",[newLevel]); 
				TakeWater(w-5);
			 )
	else return;
);

public CheckWater: nat1 ==> bool
CheckWater(lvl) == ( 			
	if tempSensor.ReadValue() > maxWaterTankTemp
	then ( 
				IO`print("\nWater cooling needed!\n");
				CoolWater(); 
				return false
			 );
	 			
	if tempSensor.ReadValue() < minWaterTankTemp		
	then ( 
				IO`print("\nWater heating needed!\n"); 
				HeatWater(); 
				return false
			 );
	
	if waterLevel < lvl
	then (
				let newLevel = IncWaterLevel(waterLevel, lvl) in
				IO`printf("\nIncreasing water level, new is: %1s",[newLevel]); 
				return false
			 );
			 
	return true;
);


private HeatWater: () ==> ()
HeatWater() ==         
	heatingElement.Step();

private CoolWater: () ==> ()
CoolWater() ==         
	coolingElement.Step();

end WaterTankController