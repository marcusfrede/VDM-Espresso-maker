class WaterTankController is subclass of GLOBAL

instance variables

inv TempInv(tankTempSensor);
inv LevelInv(tankLevelSensor);

public tankTempSensor 		: TemperatureSensor := new TemperatureSensor(1, <TEMPSENSOR>);
public tankLevelSensor 	: LevelSensor := new LevelSensor(1, <LEVELSENSOR>);

heatingElement 		: HeatingElement := new HeatingElement(1);
coolingElement 		: CoolingElement := new CoolingElement(1);
waterPump 				: WaterPump 		 := new WaterPump(1);

functions
 
TempInv: TemperatureSensor -> bool
TempInv(s) == (
	s.ReadValue() >= 0 and s.ReadValue() <= 100
);

LevelInv: LevelSensor -> bool
LevelInv(s) == (
	s.ReadValue() >= minWaterTankLevel and s.ReadValue() <= maxWaterTankLevel
);

operations

public FillTank: () ==> ()
FillTank() == (   
	IO`printf("\nFilling water tank to %1s ml", [maxWaterTankLevel]);
	DoFillTank();
)
pre tankLevelSensor.ReadValue() < maxWaterTankLevel;
--post tankLevelSensor.ReadValue() = maxWaterTankLevel;

public EmptyTank: () ==> ()
EmptyTank() == (         
	DoEmptyTank();
	IO`print("\nEmptying water tank");
)
pre tankLevelSensor.ReadValue() > minWaterTankLevel;
--post tankLevelSensor.ReadValue() = minWaterTankLevel;


public HeatWater: () ==> ()
HeatWater() ==         
	heatingElement.Step();

public CoolWater: () ==> ()
CoolWater() ==         
	coolingElement.Step();

public TakeWater: nat ==> ()
TakeWater(w) == (
	if w > 0
	then (tankLevelSensor.Step();
				let x = waterPump.WaterOut() in
				TakeWater(w-5);
			 )
	else return;
);

public WaterLevelCheck: nat1 ==> ()
WaterLevelCheck(l)==
	if l < maxWaterTankLevel 
	then let x = waterPump.WaterIn() in IO`print("");

DoFillTank: () ==> ()
DoFillTank() == 
	if waterPump.WaterIn() < maxWaterTankLevel 
	then DoFillTank()		
	else return;


DoEmptyTank: () ==> ()
DoEmptyTank() == 
	if waterPump.WaterOut() > minWaterTankLevel
	then DoEmptyTank()
	else return;



end WaterTankController