class WaterTankController is subclass of GLOBAL, WaterTank

instance variables

heatingElement : HeatingElement := new HeatingElement(1);
coolingElement : CoolingElement := new CoolingElement(1);

functions

IncreaseWater: nat * nat -> nat
IncreaseWater(current, goal) ==
	if current < goal
	then IncreaseWater(current+5, goal)
	else current
measure IncWaterMeasure;

IncWaterMeasure: nat * nat -> nat
IncWaterMeasure(c,g) == g - c; 

DecreaseWater: nat * nat -> nat
DecreaseWater(current, goal) ==
	if current > goal
	then DecreaseWater(current-5, goal)
	else current
measure DecWaterMeasure;

DecWaterMeasure: nat * nat -> nat
DecWaterMeasure(c,g) == g + c; 

operations

public Step: () ==> ()
Step() ==
  (  
    UpdateSensors();
		FillWaterTank();		    				
		CorrectWaterTemperature();		
		
		if World`env.Verbose() then IO`print("\nTank step\n"); 
  );

public UpdateSensors: () ==> ()
UpdateSensors() == (
	CM`tempSensor.Step();
	CM`levelSensor.Step();
);

public CorrectWaterTemperature: () ==> ()
CorrectWaterTemperature() == ( 				
	if CM`tempSensor.ReadValue() > maxWaterTankTemp
	then coolingElement.Step(); 
					 			
	if CM`tempSensor.ReadValue() < minWaterTankTemp		
	then heatingElement.Step();
);

public TakeWater: nat1 ==> ()
TakeWater(n) == 
	let wl = CM`levelSensor.ReadValue() in (
 	CM`waterTank.SetWaterLevel(DecreaseWater(wl, wl - n));
 	if World`env.Verbose() then IO`printf("\nDecreased water level to: %1s",[wl]); 
);
	
public FillWaterTank: () ==> ()
FillWaterTank() ==
	let wl = CM`levelSensor.ReadValue() in (
	if wl < maxWaterTankLevel
	then (
				CM`waterTank.SetWaterLevel(IncreaseWater(wl, wl + 5));
				if World`env.Verbose() then IO`printf("\nIncreased water level to: %1s",[wl]); 
			 );
);

end WaterTankController