class WaterPump is subclass of GLOBAL

instance variables

private waterLevel : nat := 0;
private levelSensor 	: LevelSensor := new LevelSensor(1, <LEVELSENSOR>);
protected ID : nat;
inv LevelInv(levelSensor);



functions

LevelInv: LevelSensor -> bool
LevelInv(s) == (
	s.ReadValue() >= minWaterTankLevel and s.ReadValue() <= maxWaterTankLevel
);

IncreaseWater: nat * nat -> nat
IncreaseWater(current, goal) ==
	if current > goal
	then IncreaseWater(current-5, goal)
	else current;

DecreaseWater: nat * nat -> nat
DecreaseWater(current, goal) ==
	if current < goal
	then DecreaseWater(current-5, goal)
	else current;

LevelInv: nat -> bool
LevelInv(lvl) == 
	lvl >= minWaterTankLevel and lvl <= maxWaterTankLevel;

operations


public GetWaterLevel: () ==> nat
GetWaterLevel() ==
	return waterLevel;

public IncWaterLevel: nat * nat1 ==> nat1
	IncWaterLevel(cur, lvl) == (
		waterLevel := IncreaseWater(cur, lvl);
		return waterLevel);

public DecWaterLevel: nat1 * nat ==> nat
	DecWaterLevel(cur, lvl) == (
		waterLevel := DecreaseWater(cur, lvl);
		return waterLevel);


public WaterPump: nat ==> WaterPump
	WaterPump (id) ==
		ID := id;

public GetID: () ==> nat
	GetID() ==
		return ID;

--		if World`env.Verbose() then	IO`printf("\nIncremented water level from %1s to %2s", [ol,nl]);
--		if World`env.Verbose() then	IO`printf("\nDecremented water level from %1s to %2s", [ol,nl]);

end WaterPump