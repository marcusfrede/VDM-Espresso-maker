class Environment is subclass of GLOBAL

instance variables

private inlines	 : seq of Inline := [];
private outlines : seq of Outline := [];
private	outputFile : seq of char := "";
private finished : bool := false;
private verbose : bool := false;

types

private Inline	= Order * Time;
private Outline = Order * nat * nat;  

operations

public 
Environment: seq of char * seq of char ==> Environment
  Environment(fileIn, fileOut) ==
   (def mk_ (-,mk_(v,t,b,input)) = IO`freadval[bool * nat * nat * seq of Inline](fileIn) 
    in
     (
     	inlines := input;
			verbose := v;
			CM`waterTankController.SetTemp(t);
      outputFile := fileOut;
				   
      IO`print("\n--- Booting system ---");
      IO`printf("\nInitial water level: %1s",[CM`waterTankController.GetWaterLevel()]);
      IO`printf("\nInitial water temperature: %1s",[CM`waterTankController.ReadTemp()]);
      CM`grinder.FillGrinder();
      IO`printf("\nRemaining bean weight: %1s",[CM`grinder.RemaingBeanWeight()]);
      CM`cupController.FillCups(20);     
      IO`print("\n--- System booted successfully ---\n");        
     );
  
   );
   
public 
Run: () ==> ()
Run () == (
	while (isFinished() = false and 
	CM`stateController.GetState() <> <Error>) do
 	(
 		CM`brewController.Step();  			
 	  CM`waterTankController.UpdateSensors();
 		CreateSignal();
   	World`timerRef.StepTime();
  );
);


CreateSignal: () ==> ()
CreateSignal() == (
	if len inlines > 0
  then 
  (
  	dcl curtime : nat := World`timerRef.GetTime();
  	def mk_ (order, time) = hd inlines in
   	(
   		if time <= curtime
    	then 
    			(
						CM`brewController.Start(order);
						if CM`brewController.GetStatus() = <Done> 
						then (
			          	handleEvent(order, CM`waterTankController.GetWaterLevel(), curtime);
			          	inlines := tl inlines; -- take tail and assign to inlines
          			 );
       		);
   		);
  )
  else (
  			finished := true;			
  			ShutDownReport();
        return
       );
 );	

ShutDownReport: () ==> ()
ShutDownReport() == (
	IO`print("\n\n--- Shutdown report ---");
	IO`printf("\nRemaining water level: %1s",[CM`waterTankController.GetWaterLevel()]);
	IO`printf("\nCurrent water temperature: %1s",[CM`waterTankController.ReadTemp()]);
	IO`printf("\nRemaining bean weight: %1s",[CM`grinder.RemaingBeanWeight()]);
	CM`cupController.PrintRemainingCups();
	IO`print("\n--- System terminated ---\n");
);

public 
handleEvent: Order * nat * Time ==> ()
handleEvent(o,l,t) == outlines := outlines ^ [mk_(o,l,t)]; 

public 
ShowResult: () ==> ()
ShowResult() ==
	def - = IO`fwriteval[seq of Outline](outputFile, outlines, <start>) in skip; 
	-- using start to overwrite the content of the output file. Description in IO library file.

public 
isFinished: () ==> bool
isFinished() == return inlines = [] and finished;

public 
Verbose: () ==> bool
Verbose() == return verbose;

end Environment