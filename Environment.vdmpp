class Environment is subclass of GLOBAL

instance variables


private waterTemp   : nat := 5;
private waterLevel  : nat := 10;

inv LevelInv(waterLevel);


private inlines	 : seq of Inline := [];
private outlines : seq of Outline := [];
private	outputFile : seq of char := "";
private finished : bool := false;

types


public Order = CupSize * DrinkType;
public Inline	= Order * Time;
public Outline = Order * nat * nat;  




functions
LevelInv: nat -> bool
LevelInv(lvl) == 
	lvl >= 0;

operations

--- Env operations ---

public 
Environment: seq of char * seq of char ==> Environment
  Environment(fileIn, fileOut) ==
--   (def mk_ (-,mk_(t,b,input)) = IO`freadval[nat * nat * seq of Inline](fileIn) 
   (def mk_ (-,mk_(b,input)) = IO`freadval[nat * seq of Inline](fileIn) 
    in
     (inlines := input;
     -- simtime := t;

      IO`print("\n--- Booting system ---");


      CM`grinder.FillGrinder(b);
      CM`cupController.FillCups(20,20,20);
      
      outputFile := fileOut;
     );
  
   );
   
public 
Run: () ==> ()
Run () == (
	while not (isFinished() 
 
 	)
 	do
 	(CreateSignal();
   -- step rest of model
   
   
   
   World`timerRef.StepTime();
  );
);




private 
CreateSignal: () ==> ()
CreateSignal() ==
 (if len inlines > 0
  then (
  	dcl curtime : nat := World`timerRef.GetTime();
  	def mk_ (order, time) = hd inlines 
  	in
   	(if time <= curtime
    	then (--SetTemp(temp);
    			
    			CM`brewController.Start(order.#2);
    			
          IO`print("\n\nNew env values set");
          
          IO`print("\nAt time: ");
          IO`print(time);
          IO`print("\ncur time: ");
          IO`print(curtime);
          
          IO`print("\ncupsize: ");
          IO`print(order.#1);
          IO`print("\nOrder: ");
          IO`print(order.#2);
          handleEvent(order, waterLevel, curtime);
          
          inlines := tl inlines; -- take tail and assign to inlines
          return
         );
   );
  )
  else (finished := true;
        return
       );
 );	


public 
handleEvent : Order * nat * Time ==> ()
handleEvent(o,l,t) == outlines := outlines ^ [mk_(o,l,t)]; 

public 
ShowResult : () ==> ()
ShowResult () ==
   def - = IO`fwriteval[seq of Outline](outputFile, outlines, <start>) in skip; -- using start to overwrite the content of the output file. Description in IO library file.

public 
isFinished : () ==> bool
isFinished () == return inlines = [] and finished;













--- Coffee ---

public ReadTemp: () ==> nat
	ReadTemp() ==
		return waterTemp;

public IncTemp: () ==> ()
	IncTemp() ==
		waterTemp := waterTemp + 1;

public DecTemp: () ==> ()
	DecTemp() ==
		waterTemp := waterTemp - 1;

public SetTemp: nat ==> ()
	SetTemp(t) ==
		waterTemp := t;

public GetWaterLevel: () ==> nat
	GetWaterLevel() ==
		return waterLevel;

public IncWaterLevel: () ==> nat
	IncWaterLevel() == (
		waterLevel := waterLevel + 1;
		return waterLevel;
		);

public DecWaterLevel: () ==> nat
	DecWaterLevel() == (
		waterLevel := waterLevel - 1;
		return waterLevel;
		);
--	pre LevelInv(waterLevel);



end Environment