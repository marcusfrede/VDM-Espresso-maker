class Environment

instance variables

private envTemp		 : nat;
private waterTemp  : nat := 5;
private waterLevel : nat := 0;
inv LevelInv(waterLevel);


/*
private io       : IO := new IO();
private inlines	 : seq of inline := [];
private simtime	 : nat;
*/
--private finished : bool := false;

--
-- Types definition section
--
types

-- Input file: Temp, Time
--public inline	= nat * nat;

--
-- Operations definition section
--

functions
LevelInv: nat -> bool
LevelInv(lvl) == 
	lvl >= 0;

operations

public Environment: seq of char ==> Environment
  Environment(fname) ==
   (def mk_ (-,mk_(t,input)) = io.freadval[nat * seq of inline](fname) 
    in
     (inlines := input;
      simtime := t;
     );
  
    envTemp := 20;
    envHumid := 85;
   );

/*
public Environment: seq of char ==> Environment
  Environment(fname) ==
   (def mk_ (-,mk_(t,input)) = io.freadval[nat * seq of inline](fname) 
    in
     (inlines := input;
      simtime := t;
     );
  
    envTemp := 20;
   );
   
public Run: () ==> ()
Run () == 
 (while not isFinished() do
    (CreateSignal();
     -- step rest of model
     World`timerRef.StepTime();
    );
 );

private CreateSignal: () ==> ()
CreateSignal() ==
 (if len inlines > 0
  then (dcl curtime : nat := World`timerRef.GetTime();
  def mk_ (temp, time) = hd inlines 
  in
   (if time <= curtime
    then (SetTemp(temp);
          IO`print("\n\nNew env values set");
          IO`print("\nAt time: ");
          IO`print(time);
          IO`print("\nTemp: ");
          IO`print(temp);
          inlines := tl inlines;
          return
         );
   );
  )
  else (finished := true;
        return
       );
 );	
*/

public ReadTemp: () ==> nat
	ReadTemp() ==
		return waterTemp;

public IncTemp: () ==> ()
	IncTemp() ==
		waterTemp := waterTemp + 1;

public DecTemp: () ==> ()
	DecTemp() ==
		waterTemp := waterTemp - 1;

public SetTemp: nat ==> ()
	SetTemp(t) ==
		waterTemp := t;

public GetWaterLevel: () ==> nat
	GetWaterLevel() ==
		return waterLevel;

public IncWaterLevel: () ==> nat
	IncWaterLevel() == (
		waterLevel := waterLevel + 1;
		return waterLevel;
		);

public DecWaterLevel: () ==> nat
	DecWaterLevel() == (
		waterLevel := waterLevel - 1;
		return waterLevel;
		);
--	pre LevelInv(waterLevel);

--public isFinished : () ==> bool
--isFinished () == 
--  return inlines = [] and finished;

end Environment