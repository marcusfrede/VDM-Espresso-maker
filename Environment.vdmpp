class Environment is subclass of GLOBAL

instance variables


private waterTemp   : nat := 0;
private waterLevel  : nat := 0;

inv LevelInv(waterLevel);

private inlines	 : seq of Inline := [];
private outlines : seq of Outline := [];
private	outputFile : seq of char := "";
private finished : bool := false;

types

public Inline	= Order * Time;
public Outline = Order * nat * nat;  


functions

LevelInv: nat -> bool
LevelInv(lvl) == 
	lvl >= 0;

operations

--- Env operations ---

public 
Environment: seq of char * seq of char ==> Environment
  Environment(fileIn, fileOut) ==
--   (def mk_ (-,mk_(t,b,input)) = IO`freadval[nat * nat * seq of Inline](fileIn) 
   (def mk_ (-,mk_(t,l,b,input)) = IO`freadval[nat * nat * nat * seq of Inline](fileIn) 
    in
     (inlines := input;

			waterTemp := t;
			waterLevel := l;
			
			
      IO`print("\n--- Booting system ---");

      IO`printf("\nInitial water level: %1s",[waterLevel]);
      IO`printf("\nInitial water temperature: %1s",[waterTemp]);



      CM`grinder.FillGrinder(b);
      IO`printf("\nRemaining bean weight: %1s",[CM`grinder.RemaingBeanWeight()]);
      CM`cupController.FillCups(20,20,20);
      
      IO`print("\n--- System booted successfully ---\n");
      
      
      outputFile := fileOut;
     );
  
   );
   
public 
Run: () ==> ()
Run () == (
	while not (isFinished() 
 
 	)
 	do
 	(CreateSignal();
   -- step rest of model
   
   
   
   World`timerRef.StepTime();
  );
);




private 
CreateSignal: () ==> ()
CreateSignal() ==
 (if len inlines > 0
  then (
  	dcl curtime : nat := World`timerRef.GetTime();
  	def mk_ (order, time) = hd inlines 
  	in
   	(if time <= curtime
    	then (--SetTemp(temp);
    			
    			
    			
    			if CM`stateController.GetState() = <Error>
    			then 
    			(
			      IO`print("\n\n\n*** System error occurred ***\n*** Please call maintenace staff ***\n");
			      inlines := [];
			      return;
    			);
    			    			
    			CM`waterTankController.tankTempSensor.Step();
    			CM`waterTankController.tankLevelSensor.Step();
    			
    			
    		--	CM`waterTankController.FillTank();
    			
    			
    			
    			if CM`waterTankController.tankTempSensor.ReadValue() > maxWaterTankTemp
    			then ( IO`print("\nWater cooling needed!\n"); CM`waterTankController.CoolWater(); return);
    			 			
    			if CM`waterTankController.tankTempSensor.ReadValue() < minWaterTankTemp		
    			then ( IO`print("\nWater heating needed!\n"); CM`waterTankController.HeatWater(); return);
    			
    			if CM`waterTankController.tankTempSensor.ReadValue() <= maxWaterTankTemp and
    				 CM`waterTankController.tankTempSensor.ReadValue() >= minWaterTankTemp and
    				 CM`stateController.GetState() = <Normal>				
    			then
    			(
    				IO`print("\nWater temperature ok\n");
    			
						CM`brewController.Start(order);
	    			
	          IO`print("\n\nNew env values set");
	          
	          IO`print("\nAt time: ");
	          IO`print(time);
	          IO`print("\ncur time: ");
	          IO`print(curtime);
	          
	          IO`print("\ncupsize: ");
	          IO`print(order.#1);
	          IO`print("\nOrder: ");
	          IO`print(order.#2);
	      
	          handleEvent(order, waterLevel, curtime);
	          
	          inlines := tl inlines; -- take tail and assign to inlines
	          return
          );
       );
   	);
  )
  else (finished := true;
  
        IO`print("\n\n--- Shutdown report ---");

	      IO`printf("\nRemaining water level: %1s",[waterLevel]);
	      IO`printf("\nCurrent water temperature: %1s",[waterTemp]);
		    IO`printf("\nRemaining bean weight: %1s",[CM`grinder.RemaingBeanWeight()]);
	 		  IO`printf("\nRemaining cups: %1s %2s %3s", CM`cupController.RemainingCups());
	 
      	IO`print("\n--- System terminated ---\n");
        return
       );
 );	


public 
handleEvent : Order * nat * Time ==> ()
handleEvent(o,l,t) == outlines := outlines ^ [mk_(o,l,t)]; 

public 
ShowResult : () ==> ()
ShowResult () ==
   def - = IO`fwriteval[seq of Outline](outputFile, outlines, <start>) in skip; -- using start to overwrite the content of the output file. Description in IO library file.

public 
isFinished : () ==> bool
isFinished () == return inlines = [] and finished;













--- Coffee ---

pure public ReadTemp: () ==> nat
	ReadTemp() ==
		return waterTemp;

public IncTemp: () ==> nat
	IncTemp() == (
		waterTemp := waterTemp + 1;
		return waterTemp
);

public DecTemp: () ==> nat
	DecTemp() == (
		waterTemp := waterTemp - 1;
		return waterTemp;
);

pure public GetWaterLevel: () ==> nat
	GetWaterLevel() ==
		return waterLevel;

public IncWaterLevel: () ==> nat
	IncWaterLevel() == (
		waterLevel := waterLevel + 5;
		return waterLevel;
		);

public DecWaterLevel: () ==> nat
	DecWaterLevel() == (
		waterLevel := waterLevel - 5;
		return waterLevel;
		);
--	pre LevelInv(waterLevel);



end Environment